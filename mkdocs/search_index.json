{
    "docs": [
        {
            "location": "/", 
            "text": "Chaos Monkey is responsible for randomly terminating instances in production to ensure that engineers implement their services to be resilient to instance failures.\n\n\nSee \nhow to deploy\n for instructions on how to get up and running with Chaos Monkey.\n\n\nOnce you're up and running, see \nconfiguring behavior via Spinnaker\n for how users can customize the behavior of Chaos Monkey for their apps.", 
            "title": "Home"
        }, 
        {
            "location": "/Configuration-file-format/", 
            "text": "The config file is in \nTOML\n format.\n\n\nChaos Monkey will look for a file named \nchaosmonkey.toml\n in the following\nlocations:\n\n\n\n\n.\n (current directory)\n\n\n/apps/chaosmonkey\n\n\n/etc\n\n\n/etc/chaosmonkey\n\n\n\n\nExample\n\n\nHere is an example configuration file:\n\n\n[chaosmonkey]\nenabled = true\nschedule_enabled = true\nleashed = false\naccounts = [\nproduction\n, \ntest\n]\n\n[database]\nhost = \ndbhost.example.com\n\nname = \nchaosmonkey\n\nuser = \nchaosmonkey\n\nencrypted_password = \nsecurepasswordgoeshere\n\n\n[spinnaker]\nendpoint = \nhttp://spinnaker.example.com:8084\n\n\n\n\n\nNote that while the field is called \"encrypted_password\", you should put the\nunencrypted version of your password here. Chaos Monkey currently only ships\nwith a no-op (do nothing) password decryptor.\n\n\nDefaults\n\n\nThe following example shows all of the default values:\n\n\n[chaosmonkey]\nenabled = false                    # if false, won't terminate instances when invoked\nleashed = true                     # if true, terminations are only simulated (logged only)\nschedule_enabled = false           # if true, will generate schedule of terminations each weekday\naccounts = []                      # list of Spinnaker accounts with chaos monkey enabled, e.g.: [\nprod\n, \ntest\n]\n\nstart_hour = 9                     # time during day when starts terminating\nend_hour = 15                      # time during day when stops terminating\n\n# tzdata format, see TZ column in https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n# Other allowed values: \nUTC\n, \nLocal\n\ntime_zone = \nAmerica/Los_Angeles\n  # time zone used by start.hour and end.hour\n\nterm_account = \nroot\n              # account used to run the term_path command\n\nmax_apps = 2147483647              # max number of apps Chaos Monkey will schedule terminations for\n\n# location of command Chaos Monkey uses for doing terminations\nterm_path = \n/apps/chaosmonkey/chaosmonkey-terminate.sh\n\n\n# cron file that Chaos Monkey writes to each day for scheduling kills\ncron_path = \n/etc/cron.d/chaosmonkey-daily-terminations\n\n\n# decryption system for encrypted_password fields for spinnaker and database\ndecryptor = \n\n\n# event tracking systems that records chaos monkey terminations\ntrackers = []\n\n# metric collection systems that track errors for monitoring/alerting\nerror_counter = \n\n\n# outage checking system that tells chaos monkey if there is an ongoing outage\noutage_checker = \n\n\n[database]\nhost = \n                # database host\nport = 3306              # tcp port that the database is lstening on\nuser = \n                # database user\nencrypted_password = \n  # password for database auth, encrypted by decryptor\nname = \n                # name of database that contains chaos monkey data\n\n[spinnaker]\nendpoint = \n           # spinnaker api url\ncertificate = \n        # path to p12 file when using client-side tls certs\nencrypted_password = \n # password used for p12 certificate, encrypted by decryptor\nuser = \n               # user associated with terminations, sent in API call to terminate\n\n# For dynamic configuration options, see viper docs\n[dynamic]\nprovider = \n   # options: \netcd\n, \nconsul\n\nendpoint = \n   # url for dynamic provider\npath = \n       # path for dynamic provider\n\n\n\n\nNote that many of these configuration parameters (decryptor, trackers,\nerror_counter, outage_checker) currently only have no-op implementations.", 
            "title": "Configuration file format"
        }, 
        {
            "location": "/Configuration-file-format/#example", 
            "text": "Here is an example configuration file:  [chaosmonkey]\nenabled = true\nschedule_enabled = true\nleashed = false\naccounts = [ production ,  test ]\n\n[database]\nhost =  dbhost.example.com \nname =  chaosmonkey \nuser =  chaosmonkey \nencrypted_password =  securepasswordgoeshere \n\n[spinnaker]\nendpoint =  http://spinnaker.example.com:8084   Note that while the field is called \"encrypted_password\", you should put the\nunencrypted version of your password here. Chaos Monkey currently only ships\nwith a no-op (do nothing) password decryptor.", 
            "title": "Example"
        }, 
        {
            "location": "/Configuration-file-format/#defaults", 
            "text": "The following example shows all of the default values:  [chaosmonkey]\nenabled = false                    # if false, won't terminate instances when invoked\nleashed = true                     # if true, terminations are only simulated (logged only)\nschedule_enabled = false           # if true, will generate schedule of terminations each weekday\naccounts = []                      # list of Spinnaker accounts with chaos monkey enabled, e.g.: [ prod ,  test ]\n\nstart_hour = 9                     # time during day when starts terminating\nend_hour = 15                      # time during day when stops terminating\n\n# tzdata format, see TZ column in https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n# Other allowed values:  UTC ,  Local \ntime_zone =  America/Los_Angeles   # time zone used by start.hour and end.hour\n\nterm_account =  root               # account used to run the term_path command\n\nmax_apps = 2147483647              # max number of apps Chaos Monkey will schedule terminations for\n\n# location of command Chaos Monkey uses for doing terminations\nterm_path =  /apps/chaosmonkey/chaosmonkey-terminate.sh \n\n# cron file that Chaos Monkey writes to each day for scheduling kills\ncron_path =  /etc/cron.d/chaosmonkey-daily-terminations \n\n# decryption system for encrypted_password fields for spinnaker and database\ndecryptor =  \n\n# event tracking systems that records chaos monkey terminations\ntrackers = []\n\n# metric collection systems that track errors for monitoring/alerting\nerror_counter =  \n\n# outage checking system that tells chaos monkey if there is an ongoing outage\noutage_checker =  \n\n[database]\nhost =                  # database host\nport = 3306              # tcp port that the database is lstening on\nuser =                  # database user\nencrypted_password =    # password for database auth, encrypted by decryptor\nname =                  # name of database that contains chaos monkey data\n\n[spinnaker]\nendpoint =             # spinnaker api url\ncertificate =          # path to p12 file when using client-side tls certs\nencrypted_password =   # password used for p12 certificate, encrypted by decryptor\nuser =                 # user associated with terminations, sent in API call to terminate\n\n# For dynamic configuration options, see viper docs\n[dynamic]\nprovider =     # options:  etcd ,  consul \nendpoint =     # url for dynamic provider\npath =         # path for dynamic provider  Note that many of these configuration parameters (decryptor, trackers,\nerror_counter, outage_checker) currently only have no-op implementations.", 
            "title": "Defaults"
        }, 
        {
            "location": "/Configuring-behavior-via-Spinnaker/", 
            "text": "Through the Spinnaker web UI, you can configure how often Chaos Monkey\nterminates instances for each application.\n\n\nClick on the \"Config\" tab in Spinnaker. There should be a \"Chaos Monkey\"\nwidget where you can enable/disable Chaos Monkey for the app, as well as\nconfigure its behavior.\n\n\n\n\nTermination frequency\n\n\nBy default, Chaos Monkey is configured for a \nmean time between terminations\n of\ntwo (2) days, which means that on average Chaos Monkey will terminate an\ninstance every two days for each group in that app.\n\n\nChaos Monkey also has a \nminimum time between terminations\n, which defaults to\none (1) day. This means that Chaos Monkey is guaranteed to never kill more often\nthan once a day for each group. Even if multiple Chaos Monkeys are deployed, as\nlong as they are all configured to use the same database, they will obey the\nminimum time between terminations.\n\n\nGrouping\n\n\nChaos Monkey operates on \ngroups\n of instances. Every work day, for every\n(enabled) group of instances, Chaos Monkey will flip a biased coin to determine\nwhether it should kill from an instance from a group. If so, it will randomly\nselect an instance from the group.\n\n\nUsers can configure what Chaos Monkey considers a group.  The three options are:\n\n\n\n\napp\n\n\nstack\n\n\ncluster\n\n\n\n\nIf grouping is set to \"app\", Chaos Monkey will terminate up to one instance per\napp each day, regardless of how these instances are organized into clusters.\n\n\nIf the grouping is set to \"stack\", Chaos Monkey will terminate up to one instance per\nstack each day. For instance, if an application has three stacks defined, then\nChaos Monkey may kill up to three instances in this app per day.\n\n\nIf the grouping is set to \"cluster\", Chaos Monkey will terminate up to one\ninstance per cluster each day.\n\n\nBy default, Chaos Monkey treats each region separately. However, if the \"regions\nare independent\" option is unchecked, then Chaos Monkey will not terminate\ninstances that are in the same group but in different regions. This is intended\nto support databases that replicate across regions where simultaneous\ntermination across regions is undesirable.\n\n\nExceptions\n\n\nYou can opt-out combinations of account, region, stack, and detail. In the\nexample config shown above, Chaos Monkey will not terminate instances in the\nprod account in the us-west-2 region with a stack of \"staging\" and a blank\ndetail field.\n\n\nThe exception field also supports a wildcard, \n*\n, which matches everything. In\nthe example above, Chaos Monkey will also not terminate any instances in the\ntest account, regardless of region, stack or detail.", 
            "title": "Configuring behavior via Spinnaker"
        }, 
        {
            "location": "/Configuring-behavior-via-Spinnaker/#termination-frequency", 
            "text": "By default, Chaos Monkey is configured for a  mean time between terminations  of\ntwo (2) days, which means that on average Chaos Monkey will terminate an\ninstance every two days for each group in that app.  Chaos Monkey also has a  minimum time between terminations , which defaults to\none (1) day. This means that Chaos Monkey is guaranteed to never kill more often\nthan once a day for each group. Even if multiple Chaos Monkeys are deployed, as\nlong as they are all configured to use the same database, they will obey the\nminimum time between terminations.", 
            "title": "Termination frequency"
        }, 
        {
            "location": "/Configuring-behavior-via-Spinnaker/#grouping", 
            "text": "Chaos Monkey operates on  groups  of instances. Every work day, for every\n(enabled) group of instances, Chaos Monkey will flip a biased coin to determine\nwhether it should kill from an instance from a group. If so, it will randomly\nselect an instance from the group.  Users can configure what Chaos Monkey considers a group.  The three options are:   app  stack  cluster   If grouping is set to \"app\", Chaos Monkey will terminate up to one instance per\napp each day, regardless of how these instances are organized into clusters.  If the grouping is set to \"stack\", Chaos Monkey will terminate up to one instance per\nstack each day. For instance, if an application has three stacks defined, then\nChaos Monkey may kill up to three instances in this app per day.  If the grouping is set to \"cluster\", Chaos Monkey will terminate up to one\ninstance per cluster each day.  By default, Chaos Monkey treats each region separately. However, if the \"regions\nare independent\" option is unchecked, then Chaos Monkey will not terminate\ninstances that are in the same group but in different regions. This is intended\nto support databases that replicate across regions where simultaneous\ntermination across regions is undesirable.", 
            "title": "Grouping"
        }, 
        {
            "location": "/Configuring-behavior-via-Spinnaker/#exceptions", 
            "text": "You can opt-out combinations of account, region, stack, and detail. In the\nexample config shown above, Chaos Monkey will not terminate instances in the\nprod account in the us-west-2 region with a stack of \"staging\" and a blank\ndetail field.  The exception field also supports a wildcard,  * , which matches everything. In\nthe example above, Chaos Monkey will also not terminate any instances in the\ntest account, regardless of region, stack or detail.", 
            "title": "Exceptions"
        }, 
        {
            "location": "/Decryptor/", 
            "text": "A decryptor allows you to use encrypted versions of the passwords for the MySQL\ndatabase and Spinnaker p12 certificate (see \nconfiguration file format\n).\nChaos Monkey will invoke the decryptor to decrypt the passwords before using\nthem.\n\n\nChaos Monkey does not ship with any decryptor implementations. If you wish to\nuse this functionality, you will need to implement your own.\n\n\nIf you wish to store your passwords encrypted and use a decryption system at\nruntime, you need to:\n\n\n\n\nGive your decryptor a name (e.g., \"gpg\")\n\n\nCode up a type in Go that implements the \nDecryptor\n interface.\n\n\nModify \ndecryptor.go\n so that it recognizes your decryptor.\n\n\nEdit your \nconfig file\n to specify your decryptor.", 
            "title": "Decryptor"
        }, 
        {
            "location": "/Error-counter/", 
            "text": "An error counter is used to record the rate of errors generated by Chaos Monkey\nto an external system such as a metrics or alerting system.\n\n\nInside of Netflix, we use an error counter to record error counts to \nAtlas\n, our metric system\n1\n.\n\n\nIf you wish to record the error counts with an external system, you need to:\n\n\n\n\nGive your error counter a name (e.g., \"ganglia\")\n\n\nCode up a type in Go that implements the \nErrorCounter\n interface\n\n\nModify \nerrorcounter.go\n so that it recognizes your error counter.\n\n\nEdit your \nconfig file\n to specify your error counter.\n\n\n\n\n\n\n1\nUnfortunately, we are unable to release this error counter as\nopen source. Our Atlas error counter communicates with a version of\n\nPrana\n that has not been released as open\nsource.", 
            "title": "Error counter"
        }, 
        {
            "location": "/How-to-deploy/", 
            "text": "We currently don't have a streamlined process for deploying Chaos Monkey. This\npage describes the manual steps required to build and deploy. A great way to\ncontribute to this project would be to use Docker containers to make it easier\nfor other users to get up and running quickly.\n\n\nPrerequisites\n\n\n\n\nSpinnaker\n\n\nMySQL (5.6 or later)\n\n\n\n\nTo use this version of Chaos Monkey, you must be using \nSpinnaker\n to manage your applications. Spinnaker is the\ncontinuous delivery platform that we use at Netflix.\n\n\nChaos Monkey also requires a MySQL-compatible database, version 5.6 or later.\n\n\nBuild\n\n\nTo build Chaos Monkey on your local machine (requires the Go\ntoolchain).\n\n\ngo get github.com/netflix/chaosmonkey/cmd/chaosmonkey\n\n\n\n\nThis will install a \nchaosmonkey\n binary in your \n$GOBIN\n directory.\n\n\nHow Chaos Monkey runs\n\n\nChaos Monkey does not run as a service. Instead, you set up a cron job\nthat calls Chaos Monkey once a weekday to create a schedule of terminations.\n\n\nWhen Chaos Monkey creates a schedule, it creates another cron job to schedule terminations\nduring the working hours of the day.\n\n\nDeploy overview\n\n\nTo deploy Chaos Monkey, you need to:\n\n\n\n\nConfigure Spinnaker for Chaos Monkey support\n\n\nSet up the MySQL database\n\n\nWrite a configuration file (chaosmonkey.toml)\n\n\nSet up a cron job that runs Chaos Monkey daily schedule\n\n\n\n\nConfigure Spinnaker for Chaos Monkey support\n\n\nSpinnaker's web interface is called \nDeck\n. You need to be running Deck version\nv.2839.0 or greater for Chaos Monkey support. Check which version of Deck you are\nrunning by hitting the \n/version.json\n endpoint of your Spinnaker deployment.\n(Note that this version information will not be present if you are running\nDeck using a \nDocker container hosted on Quay\n).\n\n\nDeck has a config file named \n/var/www/settings.js\n. In this file there is a\n\"feature\" object that contains a number of feature flags:\n\n\n  feature: {\n    pipelines: true,\n    notifications: false,\n    fastProperty: true,\n    ...\n\n\n\n\nAdd the following flag:\n\n\nchaosMonkey: true\n\n\n\n\nIf the feature was enabled successfully, when you create a new app with Spinnaker, you will see\na \"Chaos Monkey: Enabled\" checkbox in the \"New Application\" modal dialog. If it\ndoes not appear, you may need to deploy a more recent version of Spinnaker.\n\n\n\n\nFor more details, see \nAdditional configuration files\n on the\nSpinnaker website.\n\n\nCreate the MySQL database\n\n\nChaos Monkey uses a MySQL database as a backend to record a daily termination\nschedule and to enforce a minimum time between terminations. (By default, Chaos\nMonkey will not terminate more than one instance per day per group).\n\n\nLog in to your MySQL deployment and create a database named \nchaosmonkey\n:\n\n\nmysql\n CREATE DATABASE chaosmonkey;\n\n\n\n\nNote: Chaos Monkey does not currently include a mechanism for purging old data.\nUntil this function exists, it is the operator's responsibility to remove old\ndata as needed.\n\n\nWrite a configuration file (chaosmonkey.toml)\n\n\nSee \nConfiguration file format\n for the configuration file format.\n\n\nCreate the database schema\n\n\nOnce you have created a \nchaosmonkey\n database and have populated the\nconfiguration file with the database credentials, add the tables to the database\nby doing:\n\n\nchaosmonkey migrate\n\n\n\n\nVerifying Chaos Monkey is configured properly\n\n\nChaos Monkey supports a number of command-line arguments that are useful for\nverifying that things are working properly.\n\n\nSpinnaker\n\n\nYou can verify that Chaos Monkey reach Spinnaker by fetching the Chaos Monkey\nconfiguration for an app:\n\n\nchaosmonkey config \nappname\n\n\n\n\n\nIf successful, you'll see output that looks like:\n\n\n(*chaosmonkey.AppConfig)(0xc4202ec0c0)({\n Enabled: (bool) true,\n RegionsAreIndependent: (bool) true,\n MeanTimeBetweenKillsInWorkDays: (int) 2,\n MinTimeBetweenKillsInWorkDays: (int) 1,\n Grouping: (chaosmonkey.Group) cluster,\n Exceptions: ([]chaosmonkey.Exception) {\n }\n})\n\n\n\n\nIf it fails, you'll see an error message.\n\n\nDatabase\n\n\nYou can verify that Chaos Monkey can reach the database by attempting to\nretrieve the termination schedule for the day.\n\n\nchaosmonkey fetch-schedule\n\n\n\n\nIf successful, you should see output like:\n\n\n[69400] 2016/09/30 23:41:03 chaosmonkey fetch-schedule starting\n[69400] 2016/09/30 23:41:03 Writing /etc/cron.d/chaosmonkey-daily-terminations\n[69400] 2016/09/30 23:41:03 chaosmonkey fetch-schedule done\n\n\n\n\n(Chaos Monkey will write an empty file to\n\n/etc/cron.d/chaosmonkey-daily-terminations\n since the database does not contain\nany termination schedules yet).\n\n\nIf Chaos Monkey cannot reach the database, you will see an error. For example:\n\n\n[69668] 2016/09/30 23:43:50 chaosmonkey fetch-schedule starting\n[69668] 2016/09/30 23:43:50 FATAL: could not fetch schedule: failed to retrieve schedule for 2016-09-30 23:43:50.953795019 -0700 PDT: dial tcp 127.0.0.1:3306: getsockopt: connection refused\n\n\n\n\nOptional: Dynamic properties (etcd, consul)\n\n\nChaos Monkey supports changing the following configuration properties dynamically:\n\n\n\n\nchaosmonkey.enabled\n\n\nchaosmonkey.leashed\n\n\nchaosmonkey.schedule_enabled\n\n\nchaosmonkey.accounts\n\n\n\n\nThese are intended to allow an operator to make certain changes to Chaos\nMonkey's behavior without having to redeploy.\n\n\nNote: the configuration file takes precedence over dynamic provider, so do\nnot specify these properties in the config file if you want to set them\ndynamically.\n\n\nTo take advantage of dynamic properties, you need to keep those properties in\neither \netcd\n or \nConsul\n and add a \n[dynamic]\n section that contains the\nendpoint for the service and a path that returns a JSON file that has each of\nthe properties you want to set dynamically.\n\n\nChaos Monkey uses the \nViper\n library to implement dynamic configuration, see the\nViper \nremote key/value store support\n docs for more details.\n\n\nSet up a cron job that runs Chaos Monkey daily schedule\n\n\nCreate /apps/chaosmonkey/chaosmonkey-schedule.sh\n\n\nFor the remainder if the docs, we assume you have copied the chaosmonkey binary\nto \n/apps/chaosmonkey\n, and will create the scripts described below there as\nwell. However, Chaos Monkey makes no explicit assumptions about the location of\nthese files.\n\n\nCreate a file called \nchaosmonkey-schedule.sh\n that invokes \nchaosmonkey\nschedule\n and writes the output to a logfile.\n\n\nNote that because this will be invoked from cron, the PATH will likely not include the\nlocation of the chaosmonkey binary so be sure to specify it explicitly.\n\n\n/apps/chaosmonkey/chaosmonkey-schedule.sh:\n\n\n#!/bin/bash\n/apps/chaosmonkey/chaosmonkey schedule \n /var/log/chaosmonkey-schedule.log 2\n1\n\n\n\n\nCreate /etc/cron.d/chaosmonkey-schedule\n\n\nOnce you have this script, create a cron job that invokes it once a day. Chaos\nMonkey starts terminating at \nchaosmonkey.start_hour\n in\n\nchaosmonkey.time_zone\n, so it's best to pick a time earlier in the day.\n\n\nThe example below generates termination schedules each weekday at 12:00 system\ntime (which we assume is in UTC).\n\n\n/etc/cron.d/chaosmonkey-schedule:\n\n\n# Run the Chaos Monkey scheduler at 5AM PDT (4AM PST) every weekday\n# This corresponds to: 12:00 UTC\n# Because system clock runs UTC, time change affects when job runs\n\n# The scheduler must run as root because it needs root permissions to write\n# to the file /etc/cron.d/chaosmonkey-daily-terminations\n\n# min  hour  dom  month  day  user  command\n    0    12    *      *  1-5  root  /apps/chaosmonkey/chaosmonkey-schedule.sh\n\n\n\n\nCreate /apps/chaosmonkey/chaosmonkey-terminate.sh\n\n\nWhen Chaos Monkey schedules terminations, it will create cron jobs that call the\npath specified by \nchaosmonkey.term_path\n, which defaults to /apps/chaosmonkey/chaosmonkey-terminate.sh\n\n\n/apps/chaosmonkey/chaosmonkey-terminate.sh:\n\n\n#!/bin/bash\n/apps/chaosmonkey/chaosmonkey terminate \n$@\n \n /var/log/chaosmonkey-terminate.log 2\n1", 
            "title": "How to deploy"
        }, 
        {
            "location": "/How-to-deploy/#prerequisites", 
            "text": "Spinnaker  MySQL (5.6 or later)   To use this version of Chaos Monkey, you must be using  Spinnaker  to manage your applications. Spinnaker is the\ncontinuous delivery platform that we use at Netflix.  Chaos Monkey also requires a MySQL-compatible database, version 5.6 or later.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/How-to-deploy/#build", 
            "text": "To build Chaos Monkey on your local machine (requires the Go\ntoolchain).  go get github.com/netflix/chaosmonkey/cmd/chaosmonkey  This will install a  chaosmonkey  binary in your  $GOBIN  directory.", 
            "title": "Build"
        }, 
        {
            "location": "/How-to-deploy/#how-chaos-monkey-runs", 
            "text": "Chaos Monkey does not run as a service. Instead, you set up a cron job\nthat calls Chaos Monkey once a weekday to create a schedule of terminations.  When Chaos Monkey creates a schedule, it creates another cron job to schedule terminations\nduring the working hours of the day.", 
            "title": "How Chaos Monkey runs"
        }, 
        {
            "location": "/How-to-deploy/#deploy-overview", 
            "text": "To deploy Chaos Monkey, you need to:   Configure Spinnaker for Chaos Monkey support  Set up the MySQL database  Write a configuration file (chaosmonkey.toml)  Set up a cron job that runs Chaos Monkey daily schedule", 
            "title": "Deploy overview"
        }, 
        {
            "location": "/How-to-deploy/#configure-spinnaker-for-chaos-monkey-support", 
            "text": "Spinnaker's web interface is called  Deck . You need to be running Deck version\nv.2839.0 or greater for Chaos Monkey support. Check which version of Deck you are\nrunning by hitting the  /version.json  endpoint of your Spinnaker deployment.\n(Note that this version information will not be present if you are running\nDeck using a  Docker container hosted on Quay ).  Deck has a config file named  /var/www/settings.js . In this file there is a\n\"feature\" object that contains a number of feature flags:    feature: {\n    pipelines: true,\n    notifications: false,\n    fastProperty: true,\n    ...  Add the following flag:  chaosMonkey: true  If the feature was enabled successfully, when you create a new app with Spinnaker, you will see\na \"Chaos Monkey: Enabled\" checkbox in the \"New Application\" modal dialog. If it\ndoes not appear, you may need to deploy a more recent version of Spinnaker.   For more details, see  Additional configuration files  on the\nSpinnaker website.", 
            "title": "Configure Spinnaker for Chaos Monkey support"
        }, 
        {
            "location": "/How-to-deploy/#create-the-mysql-database", 
            "text": "Chaos Monkey uses a MySQL database as a backend to record a daily termination\nschedule and to enforce a minimum time between terminations. (By default, Chaos\nMonkey will not terminate more than one instance per day per group).  Log in to your MySQL deployment and create a database named  chaosmonkey :  mysql  CREATE DATABASE chaosmonkey;  Note: Chaos Monkey does not currently include a mechanism for purging old data.\nUntil this function exists, it is the operator's responsibility to remove old\ndata as needed.", 
            "title": "Create the MySQL database"
        }, 
        {
            "location": "/How-to-deploy/#write-a-configuration-file-chaosmonkeytoml", 
            "text": "See  Configuration file format  for the configuration file format.", 
            "title": "Write a configuration file (chaosmonkey.toml)"
        }, 
        {
            "location": "/How-to-deploy/#create-the-database-schema", 
            "text": "Once you have created a  chaosmonkey  database and have populated the\nconfiguration file with the database credentials, add the tables to the database\nby doing:  chaosmonkey migrate", 
            "title": "Create the database schema"
        }, 
        {
            "location": "/How-to-deploy/#verifying-chaos-monkey-is-configured-properly", 
            "text": "Chaos Monkey supports a number of command-line arguments that are useful for\nverifying that things are working properly.", 
            "title": "Verifying Chaos Monkey is configured properly"
        }, 
        {
            "location": "/How-to-deploy/#spinnaker", 
            "text": "You can verify that Chaos Monkey reach Spinnaker by fetching the Chaos Monkey\nconfiguration for an app:  chaosmonkey config  appname   If successful, you'll see output that looks like:  (*chaosmonkey.AppConfig)(0xc4202ec0c0)({\n Enabled: (bool) true,\n RegionsAreIndependent: (bool) true,\n MeanTimeBetweenKillsInWorkDays: (int) 2,\n MinTimeBetweenKillsInWorkDays: (int) 1,\n Grouping: (chaosmonkey.Group) cluster,\n Exceptions: ([]chaosmonkey.Exception) {\n }\n})  If it fails, you'll see an error message.", 
            "title": "Spinnaker"
        }, 
        {
            "location": "/How-to-deploy/#database", 
            "text": "You can verify that Chaos Monkey can reach the database by attempting to\nretrieve the termination schedule for the day.  chaosmonkey fetch-schedule  If successful, you should see output like:  [69400] 2016/09/30 23:41:03 chaosmonkey fetch-schedule starting\n[69400] 2016/09/30 23:41:03 Writing /etc/cron.d/chaosmonkey-daily-terminations\n[69400] 2016/09/30 23:41:03 chaosmonkey fetch-schedule done  (Chaos Monkey will write an empty file to /etc/cron.d/chaosmonkey-daily-terminations  since the database does not contain\nany termination schedules yet).  If Chaos Monkey cannot reach the database, you will see an error. For example:  [69668] 2016/09/30 23:43:50 chaosmonkey fetch-schedule starting\n[69668] 2016/09/30 23:43:50 FATAL: could not fetch schedule: failed to retrieve schedule for 2016-09-30 23:43:50.953795019 -0700 PDT: dial tcp 127.0.0.1:3306: getsockopt: connection refused", 
            "title": "Database"
        }, 
        {
            "location": "/How-to-deploy/#optional-dynamic-properties-etcd-consul", 
            "text": "Chaos Monkey supports changing the following configuration properties dynamically:   chaosmonkey.enabled  chaosmonkey.leashed  chaosmonkey.schedule_enabled  chaosmonkey.accounts   These are intended to allow an operator to make certain changes to Chaos\nMonkey's behavior without having to redeploy.  Note: the configuration file takes precedence over dynamic provider, so do\nnot specify these properties in the config file if you want to set them\ndynamically.  To take advantage of dynamic properties, you need to keep those properties in\neither  etcd  or  Consul  and add a  [dynamic]  section that contains the\nendpoint for the service and a path that returns a JSON file that has each of\nthe properties you want to set dynamically.  Chaos Monkey uses the  Viper  library to implement dynamic configuration, see the\nViper  remote key/value store support  docs for more details.", 
            "title": "Optional: Dynamic properties (etcd, consul)"
        }, 
        {
            "location": "/How-to-deploy/#set-up-a-cron-job-that-runs-chaos-monkey-daily-schedule", 
            "text": "", 
            "title": "Set up a cron job that runs Chaos Monkey daily schedule"
        }, 
        {
            "location": "/How-to-deploy/#create-appschaosmonkeychaosmonkey-schedulesh", 
            "text": "For the remainder if the docs, we assume you have copied the chaosmonkey binary\nto  /apps/chaosmonkey , and will create the scripts described below there as\nwell. However, Chaos Monkey makes no explicit assumptions about the location of\nthese files.  Create a file called  chaosmonkey-schedule.sh  that invokes  chaosmonkey\nschedule  and writes the output to a logfile.  Note that because this will be invoked from cron, the PATH will likely not include the\nlocation of the chaosmonkey binary so be sure to specify it explicitly.  /apps/chaosmonkey/chaosmonkey-schedule.sh:  #!/bin/bash\n/apps/chaosmonkey/chaosmonkey schedule   /var/log/chaosmonkey-schedule.log 2 1", 
            "title": "Create /apps/chaosmonkey/chaosmonkey-schedule.sh"
        }, 
        {
            "location": "/How-to-deploy/#create-etccrondchaosmonkey-schedule", 
            "text": "Once you have this script, create a cron job that invokes it once a day. Chaos\nMonkey starts terminating at  chaosmonkey.start_hour  in chaosmonkey.time_zone , so it's best to pick a time earlier in the day.  The example below generates termination schedules each weekday at 12:00 system\ntime (which we assume is in UTC).  /etc/cron.d/chaosmonkey-schedule:  # Run the Chaos Monkey scheduler at 5AM PDT (4AM PST) every weekday\n# This corresponds to: 12:00 UTC\n# Because system clock runs UTC, time change affects when job runs\n\n# The scheduler must run as root because it needs root permissions to write\n# to the file /etc/cron.d/chaosmonkey-daily-terminations\n\n# min  hour  dom  month  day  user  command\n    0    12    *      *  1-5  root  /apps/chaosmonkey/chaosmonkey-schedule.sh", 
            "title": "Create /etc/cron.d/chaosmonkey-schedule"
        }, 
        {
            "location": "/How-to-deploy/#create-appschaosmonkeychaosmonkey-terminatesh", 
            "text": "When Chaos Monkey schedules terminations, it will create cron jobs that call the\npath specified by  chaosmonkey.term_path , which defaults to /apps/chaosmonkey/chaosmonkey-terminate.sh  /apps/chaosmonkey/chaosmonkey-terminate.sh:  #!/bin/bash\n/apps/chaosmonkey/chaosmonkey terminate  $@    /var/log/chaosmonkey-terminate.log 2 1", 
            "title": "Create /apps/chaosmonkey/chaosmonkey-terminate.sh"
        }, 
        {
            "location": "/Outage-checker/", 
            "text": "An outage checker is used to automatially disable Chaos Monkey during ongoing outages.\n\n\nIf you wish to have Chaos Monkey check if there is an ongoing outage and disable\naccordingly, you need to:\n\n\n\n\nGive your outage checker a name (e.g., \"chatbot\")\n\n\nCode up a ype in Go that implements the \nOutage\n interface.\n\n\nModify \noutage.go\n so that it recognizes your outage checker.\n\n\nEdit your \nconfig file\n to specify your outage checker.", 
            "title": "Outage checker"
        }, 
        {
            "location": "/Running-locally/", 
            "text": "Note: this doc is in progress\n\n\nTo run locally, you need a local MySQL and a local Spinnaker. This page\ndescribes how to start both of those up using Docker containers\n\n\nMySQL\n\n\nThis will start up a MySQL container with the root password as \npassword\n.\n\n\ndocker run -e MYSQL_ROOT_PASSWORD=passwod -p3306:3306 mysql:5.6", 
            "title": "Running locally"
        }, 
        {
            "location": "/Running-locally/#mysql", 
            "text": "This will start up a MySQL container with the root password as  password .  docker run -e MYSQL_ROOT_PASSWORD=passwod -p3306:3306 mysql:5.6", 
            "title": "MySQL"
        }, 
        {
            "location": "/Running-tests/", 
            "text": "To run unit tests:\n\n\ngo test ./...\n\n\n\n\nTests that interact with MySQL\n\n\nThere are some tests that interact with MySQL. the test files are\n\nmysql/*_test.go\n\n\nThese tests assume a MySQL deployment at the following connection string:\n\n\nroot:password@tcp(127.0.0.1:3306)/\n\n\n\n\nTesting with Docker\n\n\nThe simplest way to run these tests is to install Docker on your local machine.\nThese tests use the \nmysql:5.6\n container (version 5.6 is used to ensure\ncompatibility with \nAmazon Aurora\n).\n\n\nNote that if you are on macOS, you must use \nDocker for Mac\n, not Docker\nToolbox. Otherwise, the Docker containers will not be accessible at 127.0.0.1.\n\n\nIf you want to run these tests, ensure you have Docker installed locally, and\ngrab the mysql:5.6 container:\n\n\ndocker pull mysql:5.6\n\n\n\n\nThen run the tests with the \ndocker\n tag, like this:\n\n\ngo test -tags docker  ./...\n\n\n\n\nThe tests will automatically start the mysql container and then bring it down.\n\n\nTesting without bringing Docker container up and down\n\n\nIf you don't want the tests to bring the mysql Docker container up and down each\ntime (e.g., you want to run the tests more quickly, or you want to test by\nrunning a mysql instance natively), use the \"dockerup\" flag along with the\n\"docker\" flag.\n\n\ngo test -tags \ndocker dockerup\n  ./...\n\n\n\n\n(In retrospect, \"docker\" and \"dockerup\" are not great names for these tag, maybe \"mysqltests\"\nand \"nodocker\" would be better).", 
            "title": "Running tests"
        }, 
        {
            "location": "/Running-tests/#tests-that-interact-with-mysql", 
            "text": "There are some tests that interact with MySQL. the test files are mysql/*_test.go  These tests assume a MySQL deployment at the following connection string:  root:password@tcp(127.0.0.1:3306)/", 
            "title": "Tests that interact with MySQL"
        }, 
        {
            "location": "/Running-tests/#testing-with-docker", 
            "text": "The simplest way to run these tests is to install Docker on your local machine.\nThese tests use the  mysql:5.6  container (version 5.6 is used to ensure\ncompatibility with  Amazon Aurora ).  Note that if you are on macOS, you must use  Docker for Mac , not Docker\nToolbox. Otherwise, the Docker containers will not be accessible at 127.0.0.1.  If you want to run these tests, ensure you have Docker installed locally, and\ngrab the mysql:5.6 container:  docker pull mysql:5.6  Then run the tests with the  docker  tag, like this:  go test -tags docker  ./...  The tests will automatically start the mysql container and then bring it down.", 
            "title": "Testing with Docker"
        }, 
        {
            "location": "/Running-tests/#testing-without-bringing-docker-container-up-and-down", 
            "text": "If you don't want the tests to bring the mysql Docker container up and down each\ntime (e.g., you want to run the tests more quickly, or you want to test by\nrunning a mysql instance natively), use the \"dockerup\" flag along with the\n\"docker\" flag.  go test -tags  docker dockerup   ./...  (In retrospect, \"docker\" and \"dockerup\" are not great names for these tag, maybe \"mysqltests\"\nand \"nodocker\" would be better).", 
            "title": "Testing without bringing Docker container up and down"
        }, 
        {
            "location": "/Termination-behavior/", 
            "text": "Enabled group\n\n\nChaos Monkey will only consider server groups eligible for termination if they\nare marked as enabled by Spinnaker.  The Spinnaker API exposes an \nisDisabled\n\nboolean flag to indicate whether a group is disabled. Chaos Monkey filters on\nthis to ensure that it only terminates from active groups.\n\n\nProbability\n\n\nFor each app, Chaos Monkey divides the instances into instance groups (the groupings\ndepend on how the app is configured). Every weekday, for each instance group,\nChaos Monkey flips a weighted coin to decide whether to terminate an instance\nfrom that group. If the coin comes up heads, Chaos Monkey schedules a termination at\na random time between 9AM and 3PM that day.\n\n\nUnder this behavior, the number of work days between terminations for an\ninstance group is a random variable that has a \ngeometric distribution\n.\n\n\nThe equation below describes the probability distribution for the time between\nterminations. \nX\n is the random variable, \nn\n is the number of work days between\nterminations, and \np\n is the probability that the coin comes up heads.\n\n\nP(X=n) = (1-p)^(n-1) \u00d7 p,   n\n=1\n\n\n\nTaking expectation over \nX\n gives the mean:\n\n\nE[X] = 1/p\n\n\n\nEach app defines two parameters that governs how often Chaos Monkey should\ninstances for that app:\n\n\n\n\nmean time between terminations in work days (\u03bc)\n\n\nmin time between terminations in work days  (\u025b)\n\n\n\n\nChaos Monkey uses \u03bc to determine what \np\n should be. If we ignore the effect of\n\u025b and solve for \np\n:\n\n\n\u03bc = E[X] = 1/p\np = 1/\u03bc\n\n\n\nAs an example, for a given app, assume that \u03bc=5. On each day, the probability of\na termination is 1/5.\n\n\nNote that if \u025b\n1, Chaos Monkey termination behavior is no longer\na geometric distribution:\n\n\nP(X=n) = (1-p)^(n-1) \u00d7 p,  n\n=\u025b\n\n\n\nIn particular, as \u025b grows larger, E[X]-\u03bc gets larger. We don't apply a\ncorrection for this, because the additional complexity in the math isn't worth\nhaving E[X] exactly equal \u03bc.\n\n\nAlso note that if \u03bc=1, then p=1, which guarantees a termination each day.", 
            "title": "Termination behavior"
        }, 
        {
            "location": "/Termination-behavior/#enabled-group", 
            "text": "Chaos Monkey will only consider server groups eligible for termination if they\nare marked as enabled by Spinnaker.  The Spinnaker API exposes an  isDisabled \nboolean flag to indicate whether a group is disabled. Chaos Monkey filters on\nthis to ensure that it only terminates from active groups.", 
            "title": "Enabled group"
        }, 
        {
            "location": "/Termination-behavior/#probability", 
            "text": "For each app, Chaos Monkey divides the instances into instance groups (the groupings\ndepend on how the app is configured). Every weekday, for each instance group,\nChaos Monkey flips a weighted coin to decide whether to terminate an instance\nfrom that group. If the coin comes up heads, Chaos Monkey schedules a termination at\na random time between 9AM and 3PM that day.  Under this behavior, the number of work days between terminations for an\ninstance group is a random variable that has a  geometric distribution .  The equation below describes the probability distribution for the time between\nterminations.  X  is the random variable,  n  is the number of work days between\nterminations, and  p  is the probability that the coin comes up heads.  P(X=n) = (1-p)^(n-1) \u00d7 p,   n =1  Taking expectation over  X  gives the mean:  E[X] = 1/p  Each app defines two parameters that governs how often Chaos Monkey should\ninstances for that app:   mean time between terminations in work days (\u03bc)  min time between terminations in work days  (\u025b)   Chaos Monkey uses \u03bc to determine what  p  should be. If we ignore the effect of\n\u025b and solve for  p :  \u03bc = E[X] = 1/p\np = 1/\u03bc  As an example, for a given app, assume that \u03bc=5. On each day, the probability of\na termination is 1/5.  Note that if \u025b 1, Chaos Monkey termination behavior is no longer\na geometric distribution:  P(X=n) = (1-p)^(n-1) \u00d7 p,  n =\u025b  In particular, as \u025b grows larger, E[X]-\u03bc gets larger. We don't apply a\ncorrection for this, because the additional complexity in the math isn't worth\nhaving E[X] exactly equal \u03bc.  Also note that if \u03bc=1, then p=1, which guarantees a termination each day.", 
            "title": "Probability"
        }, 
        {
            "location": "/Tracker/", 
            "text": "A tracker is used to record termination events in some sort of external system.\nInside Netflix, we use trackers to record terminations to\n\nAtlas\n (our metrics system) and to\nChronos, our event tracking system\n1\n.\n\n\nIf you wish to record terminations with some external system, you need to:\n\n\n\n\nGive your tracker a name (e.g., \"syslog\")\n\n\nCode up a type in Go that implements the \nTracker\n interface.\n\n\nModify \ngithub.com/netflix/chaosmonkey/tracker/getTracker\n\n   so that it recognizes your tracker.\n\n\nEdit your \nconfig file\n to specify your tracker.\n\n\n\n\n\n\n1\nUnfortunately, we are unable to release either of these trackers as\nopen source. Our Atlas tracker communicates with a version of\n\nPrana\n that has not been released as open\nsource, and Chronos has also not been released as open source.", 
            "title": "Tracker"
        }, 
        {
            "location": "/Vendoring-dependencies/", 
            "text": "If you wish to add a new dependency to Chaos Monkey, use \ngovendor\n to add it.\n\n\nPlease ensure that the license of the new dependency is compatible with Chaos Monkey's license: \nApache License Version 2.0\n.", 
            "title": "Vendoring dependencies"
        }
    ]
}